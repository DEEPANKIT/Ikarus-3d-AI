# Ikarus 3D Product Recommendation/Analytics Web App - Cursor Rules

## Project Overview

This is a production-grade ML-driven web application for furniture product recommendations and analytics.

## Code Quality Standards

- Write clean, readable, and maintainable code
- Follow PEP 8 for Python and ESLint for TypeScript
- Use type hints in Python and TypeScript
- Write comprehensive docstrings and comments
- Implement proper error handling
- Use logging instead of print statements

## Architecture Principles

- Follow SOLID principles
- Use dependency injection
- Implement separation of concerns
- Design for scalability and maintainability
- Use design patterns appropriately

## Python Backend Standards

- Use FastAPI for the backend
- Implement Pydantic models for validation
- Use async/await for I/O operations
- Implement proper error handling with HTTPException
- Use structured logging
- Implement caching with Redis
- Use environment variables for configuration

## React Frontend Standards

- Use TypeScript for type safety
- Implement component-based architecture
- Use hooks for state management
- Implement error boundaries
- Use Material-UI or Ant Design for components
- Implement responsive design
- Use Axios for API calls

## Data Science Standards

- Use pandas for data manipulation
- Implement scikit-learn for ML models
- Use transformers for NLP
- Implement proper data validation
- Use version control for models
- Document model performance metrics

## Testing Standards

- Write unit tests for all functions
- Implement integration tests
- Use pytest for Python testing
- Use Jest for React testing
- Aim for 80%+ code coverage
- Test error scenarios

## Performance Standards

- Optimize database queries
- Implement caching strategies
- Use lazy loading for components
- Optimize bundle size
- Monitor performance metrics
- Use CDN for static assets

## Security Standards

- Validate all inputs
- Sanitize user data
- Implement rate limiting
- Use HTTPS in production
- Implement authentication/authorization
- Follow OWASP guidelines

## Documentation Standards

- Write clear README files
- Document API endpoints
- Use type hints and docstrings
- Create architecture diagrams
- Document deployment process
- Maintain changelog

## Git Standards

- Use meaningful commit messages
- Create feature branches
- Use pull requests for code review
- Keep commits atomic
- Use conventional commits format
- Tag releases

## Deployment Standards

- Use Docker for containerization
- Implement CI/CD pipelines
- Use environment-specific configs
- Monitor application health
- Implement rollback strategies
- Use infrastructure as code

## ML/AI Standards

- Version control models and data
- Document model performance
- Implement A/B testing
- Monitor model drift
- Use feature stores
- Implement model serving

## Remember

- Focus on the assignment requirements
- Build for scalability
- Write production-grade code
- Test thoroughly
- Document everything
- Follow best practices
- Keep it simple and maintainable
